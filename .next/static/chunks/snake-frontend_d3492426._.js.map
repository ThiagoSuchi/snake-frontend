{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/geovanna/snake-frontend/src/app/login/page.tsx"],"sourcesContent":["\"use client\";\nimport { useState } from \"react\";\nimport { useRouter } from \"next/navigation\";\nimport { useJogador } from \"../context/jogadorContext\";\n\nexport default function LoginPage() {\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [errorMessage, setErrorMessage] = useState(\"\");\n  const router = useRouter();\n  const { setJogador } = useJogador();\n\n  const handleLogin = async () => {\n    if (!name || !password) {\n      setErrorMessage(\"Por favor, preencha nome e senha\");\n      return;\n    }\n\n    // Validação do nome\n    if (name.length < 3) {\n      setErrorMessage(\"Nome deve ter pelo menos 3 caracteres\");\n      return;\n    }\n\n    // Validação da senha\n    if (password.length < 4) {\n      setErrorMessage(\"Senha deve ter pelo menos 4 caracteres\");\n      return;\n    }\n\n    if (password.length > 20) {\n      setErrorMessage(\"Senha deve ter no máximo 20 caracteres\");\n      return;\n    }\n\n    // Verificar se a senha contém pelo menos uma letra e um número\n    const hasLetter = /[a-zA-Z]/.test(password);\n    const hasNumber = /[0-9]/.test(password);\n    \n    if (!hasLetter || !hasNumber) {\n      setErrorMessage(\"Senha deve conter pelo menos uma letra e um número\");\n      return;\n    }\n\n    setErrorMessage(\"\");\n\n    try {\n      // Verificar se já existe um jogador com esse nome no banco\n      const checkRes = await fetch(\"http://localhost:4000/jogadores\");\n      if (checkRes.ok) {\n        const existingPlayers = await checkRes.json();\n        const nameExists = existingPlayers.find((player: any) => \n          player.name?.toLowerCase().trim() === name.toLowerCase().trim()\n        );\n        \n        if (nameExists) {\n          setErrorMessage(`O nome \"${name}\" já está sendo usado por outro jogador. Escolha um nome diferente.`);\n          return;\n        }\n      }\n\n      // Se o nome não existe, tenta criar o jogador\n      const res = await fetch(\"http://localhost:4000/jogadores\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ name, password }),\n      });\n\n      const data = await res.json();\n\n      if (res.ok) {\n        setJogador(data.jogador);\n\n        if (typeof window !== \"undefined\") {\n          localStorage.setItem(\"nomeJogador\", data.jogador.name);\n          localStorage.setItem(\"jogadorId\", data.jogador._id);\n        }\n\n        router.push(\"/jogo\");\n      } else {\n        // Se mesmo assim der erro de nome duplicado (double-check do backend)\n        if (res.status === 409 || (data.error && (data.error.includes(\"já existe\") || data.error.includes(\"duplicado\")))) {\n          setErrorMessage(`O nome \"${name}\" já está sendo usado. Tente outro nome.`);\n        } else {\n          setErrorMessage(data.error || \"Erro no cadastro/login\");\n        }\n      }\n    } catch (err) {\n      console.error(err);\n      setErrorMessage(\"Erro ao conectar com o servidor\");\n    }\n  };\n\n  return (\n    <div className=\"h-screen flex flex-col items-center justify-center bg-black text-green-400 font-mono\">\n      <h1 className=\"text-3xl mb-6\">Bem-vindo jogador</h1>\n      \n      {errorMessage && (\n        <div className=\"mb-4 p-3 bg-red-900/50 border border-red-500 rounded text-red-300 text-center max-w-md\">\n          {errorMessage}\n        </div>\n      )}\n      \n      <input\n        className=\"mb-4 px-4 py-2 rounded bg-gray-800 text-white\"\n        placeholder=\"Nome\"\n        value={name}\n        onChange={(e) => {\n          setName(e.target.value);\n          setErrorMessage(\"\"); \n        }}\n      />\n      <input\n        type=\"password\"\n        className=\"mb-4 px-4 py-2 rounded bg-gray-800 text-white\"\n        placeholder=\"Senha\"\n        value={password}\n        onChange={(e) => {\n          setPassword(e.target.value);\n          setErrorMessage(\"\");\n        }}\n        onKeyPress={(e) => {\n          if (e.key === \"Enter\") {\n            handleLogin();\n          }\n        }}\n      />\n      <button\n        className=\"border px-6 py-2 rounded hover:bg-green-600\"\n        onClick={handleLogin}\n      >\n        Entrar\n      </button>\n      \n      <div className=\"mt-6 text-sm text-gray-400 text-center max-w-md\">\n        <p className=\"mb-2\">Requisitos:</p>\n        <p>• Nome: mínimo 3 caracteres (deve ser único)</p>\n        <p>• Senha: 4-20 caracteres com letra e número</p>\n        <p className=\"mt-2 text-xs text-yellow-400\">\n          ⚠️ Cada jogador deve ter um nome único no ranking\n        </p>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///home/geovanna/snake-frontend/node_modules/next/navigation.js"],"sourcesContent":["module.exports = require('./dist/client/components/navigation')\n"],"names":[],"mappings":"AAAA,OAAO,OAAO","ignoreList":[0],"debugId":null}}]
}