{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Suporte%20N1/snake-frontend/src/app/jogo/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { useEffect, useRef, useState, useCallback } from \"react\";\r\nimport axios from \"axios\";\r\nimport Link from \"next/link\";\r\n// Componente de tela de Game Over, renomeado conforme solicitado\r\nimport JogarDeNovo from \"./JogarDeNovo\"; \r\n\r\n// =================================================================\r\n// üéÆ Configura√ß√µes do Jogo\r\n// =================================================================\r\nconst CELL_SIZE = 20; // Tamanho de cada c√©lula (bloco) em pixels\r\nconst GRID_SIZE = 20; // N√∫mero de c√©lulas por lado (20x20)\r\nconst GAME_SPEED = 150; // Velocidade em milissegundos (a cada 150ms a cobra se move)\r\n\r\n// Cores para o tema SNAKE-ONLINE\r\nconst SNAKE_COLOR = \"white\"; \r\nconst APPLE_COLOR = \"yellow\"; \r\nconst GRID_COLOR_DARK = \"#1a1a1a\"; // Fundo cinza escuro\r\nconst GRID_COLOR_LIGHT = \"#2e2e2e\"; // O \"quadradinho branco clarinho\" (na verdade, cinza claro)\r\n\r\n// Posi√ß√µes iniciais\r\nconst INITIAL_SNAKE = [{ x: 8, y: 8 }];\r\nconst INITIAL_APPLE = { x: 12, y: 12 };\r\n\r\n\r\nexport default function Jogo() {\r\n  const canvasRef = useRef<HTMLCanvasElement>(null);\r\n  const [context, setContext] = useState<CanvasRenderingContext2D | null>(null);\r\n\r\n  // Estados principais do jogo\r\n  const [snake, setSnake] = useState(INITIAL_SNAKE);\r\n  const [apple, setApple] = useState(INITIAL_APPLE);\r\n  const [direction, setDirection] = useState(\"RIGHT\");\r\n  const [score, setScore] = useState(0);\r\n  const [isDead, setIsDead] = useState(false);\r\n\r\n  // Informa√ß√µes do jogador (puxadas do localStorage)\r\n  const playerName =\r\n    typeof window !== \"undefined\" ? localStorage.getItem(\"nomeJogador\") : \"\";\r\n  const playerId =\r\n    typeof window !== \"undefined\" ? localStorage.getItem(\"jogadorId\") : \"\";\r\n\r\n  // =================================================================\r\n  // üé® Fun√ß√µes de Desenho (para o canvas)\r\n  // =================================================================\r\n\r\n  // Desenha o fundo quadriculado (xadrez)\r\n  const drawGrid = useCallback((ctx: CanvasRenderingContext2D) => {\r\n    for (let x = 0; x < GRID_SIZE; x++) {\r\n      for (let y = 0; y < GRID_SIZE; y++) {\r\n        // Alterna a cor com base na soma das coordenadas para criar o xadrez\r\n        ctx.fillStyle = (x + y) % 2 === 0 ? GRID_COLOR_DARK : GRID_COLOR_LIGHT;\r\n        ctx.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  // Desenha a cobra\r\n  const drawSnake = useCallback((ctx: CanvasRenderingContext2D, s: typeof INITIAL_SNAKE) => {\r\n    ctx.fillStyle = SNAKE_COLOR;\r\n    s.forEach((segment) => {\r\n      ctx.fillRect(segment.x * CELL_SIZE, segment.y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\r\n    });\r\n  }, []);\r\n\r\n  // Desenha a ma√ß√£\r\n  const drawApple = useCallback((ctx: CanvasRenderingContext2D, a: typeof INITIAL_APPLE) => {\r\n    ctx.fillStyle = APPLE_COLOR;\r\n    ctx.fillRect(a.x * CELL_SIZE, a.y * CELL_SIZE, CELL_SIZE, CELL_SIZE);\r\n  }, []);\r\n\r\n  // Fun√ß√£o principal de desenho, chamada a cada frame\r\n  const drawGame = useCallback((ctx: CanvasRenderingContext2D, s: typeof INITIAL_SNAKE, a: typeof INITIAL_APPLE) => {\r\n    drawGrid(ctx);\r\n    drawSnake(ctx, s);\r\n    drawApple(ctx, a);\r\n  }, [drawGrid, drawSnake, drawApple]);\r\n\r\n\r\n  // =================================================================\r\n  // ‚öôÔ∏è L√≥gica do Jogo\r\n  // =================================================================\r\n\r\n  // Salva a pontua√ß√£o final no servidor\r\n  const saveScore = async (finalScore: number) => {\r\n    if (!playerId) return;\r\n    try {\r\n      await axios.put(`http://localhost:4000/jogadores/${playerId}/score`, {\r\n        score: finalScore,\r\n      });\r\n      console.log(\"Pontua√ß√£o salva com sucesso!\");\r\n    } catch (err) {\r\n      console.error(\"Erro ao salvar a pontua√ß√£o:\", err);\r\n    }\r\n  };\r\n\r\n  // Encerra o jogo e chama a fun√ß√£o de salvar score\r\n  const gameOver = useCallback(() => {\r\n    setIsDead(true);\r\n    saveScore(score); \r\n  }, [score, playerId]);\r\n\r\n  // Reinicia o jogo para o estado inicial\r\n  const restartGame = () => {\r\n    setSnake(INITIAL_SNAKE);\r\n    setApple(INITIAL_APPLE);\r\n    setDirection(\"RIGHT\"); \r\n    setScore(0);\r\n    setIsDead(false);\r\n  };\r\n\r\n  // O \"tick\" do jogo: calcula a nova posi√ß√£o e verifica colis√µes\r\n  const gameLoop = useCallback(() => {\r\n    if (!context || isDead) return;\r\n\r\n    // 1. Desenha o estado atual\r\n    drawGame(context, snake, apple);\r\n\r\n    // 2. Calcula a pr√≥xima posi√ß√£o da cabe√ßa (cabe√ßa nova)\r\n    const head = { ...snake[0] };\r\n    if (direction === \"UP\") head.y -= 1;\r\n    else if (direction === \"DOWN\") head.y += 1;\r\n    else if (direction === \"LEFT\") head.x -= 1;\r\n    else if (direction === \"RIGHT\") head.x += 1;\r\n\r\n    // 3. Verifica Colis√µes: Paredes\r\n    if (head.x < 0 || head.y < 0 || head.x >= GRID_SIZE || head.y >= GRID_SIZE) {\r\n      gameOver();\r\n      return;\r\n    }\r\n\r\n    // 4. Verifica Colis√µes: Corpo\r\n    // Come√ßa a verificar do segundo segmento (√≠ndice 1)\r\n    for (let i = 1; i < snake.length; i++) {\r\n      if (head.x === snake[i].x && head.y === snake[i].y) {\r\n        gameOver();\r\n        return;\r\n      }\r\n    }\r\n\r\n    let newSnake = [head, ...snake];\r\n\r\n    // 5. Verifica Colis√£o: Ma√ß√£\r\n    if (head.x === apple.x && head.y === apple.y) {\r\n      setScore((prevScore) => prevScore + 10);\r\n      \r\n      // Gera nova ma√ß√£ em uma posi√ß√£o que n√£o esteja ocupada pela cobra\r\n      let newApple;\r\n      do {\r\n        newApple = {\r\n          x: Math.floor(Math.random() * GRID_SIZE),\r\n          y: Math.floor(Math.random() * GRID_SIZE),\r\n        };\r\n      } while (newSnake.some(segment => segment.x === newApple.x && segment.y === newApple.y)); \r\n      setApple(newApple);\r\n    } else {\r\n      newSnake.pop(); // Se n√£o comeu, remove o √∫ltimo segmento para simular o movimento\r\n    }\r\n\r\n    setSnake(newSnake);\r\n  }, [context, snake, direction, apple, isDead, drawGame, gameOver]);\r\n\r\n\r\n  // =================================================================\r\n  // üöÄ Efeitos e Handlers\r\n  // =================================================================\r\n\r\n  // Efeito: Inicializa o contexto 2D e o desenho inicial\r\n  useEffect(() => {\r\n    if (canvasRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n      if (ctx) {\r\n        setContext(ctx);\r\n        drawGame(ctx, INITIAL_SNAKE, INITIAL_APPLE);\r\n      }\r\n    }\r\n  }, [drawGame]);\r\n\r\n  // Efeito: Controla o loop do jogo e os comandos do teclado\r\n  useEffect(() => {\r\n    if (isDead) return;\r\n\r\n    // Inicia o loop de repeti√ß√£o do jogo (movimento da cobra)\r\n    const interval = setInterval(() => {\r\n      gameLoop();\r\n    }, GAME_SPEED);\r\n\r\n    // Handler para capturar as teclas de dire√ß√£o\r\n    const handleKey = (e: KeyboardEvent) => {\r\n      // Bloqueia movimento contr√°rio\r\n      if (e.key === \"ArrowUp\" && direction !== \"DOWN\") setDirection(\"UP\");\r\n      else if (e.key === \"ArrowDown\" && direction !== \"UP\") setDirection(\"DOWN\");\r\n      else if (e.key === \"ArrowLeft\" && direction !== \"RIGHT\") setDirection(\"LEFT\");\r\n      else if (e.key === \"ArrowRight\" && direction !== \"LEFT\") setDirection(\"RIGHT\");\r\n    };\r\n\r\n    document.addEventListener(\"keydown\", handleKey);\r\n\r\n    // Limpeza: Desliga o intervalo e remove o listener ao desmontar\r\n    return () => {\r\n      clearInterval(interval);\r\n      document.removeEventListener(\"keydown\", handleKey);\r\n    };\r\n  }, [gameLoop, isDead, direction]); \r\n\r\n\r\n  // =================================================================\r\n  // üñºÔ∏è Renderiza√ß√£o\r\n  // =================================================================\r\n  return (\r\n    <div style={{ textAlign: \"center\", backgroundColor: \"#000\", minHeight: \"100vh\", color: \"white\", paddingBottom: \"50px\" }}>\r\n      <h1 style={{ color: \"yellow\", paddingTop: 20 }}>üêç SNAKE-ONLINE</h1>\r\n      <p style={{ color: \"white\" }}>\r\n        Jogador: **{playerName || \"Convidado\"}**\r\n      </p>\r\n      <p style={{ color: \"white\", fontSize: \"1.2em\", fontWeight: \"bold\" }}>\r\n        Pontua√ß√£o: <span style={{ color: \"yellow\" }}>{score}</span>\r\n      </p>\r\n\r\n      <div style={{ position: 'relative', width: CELL_SIZE * GRID_SIZE, margin: '20px auto' }}>\r\n        <canvas\r\n          ref={canvasRef}\r\n          width={CELL_SIZE * GRID_SIZE}\r\n          height={CELL_SIZE * GRID_SIZE}\r\n          style={{ border: \"2px solid white\", background: GRID_COLOR_DARK }}\r\n        />\r\n\r\n        {/* Exibe o componente de Game Over se o jogador estiver \"morto\" */}\r\n        {isDead && (\r\n          <JogarDeNovo onRestart={restartGame} />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}